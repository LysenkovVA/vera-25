// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Аттрибуты Prisma: https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attributes

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------

// Пользователи
model User {
  id       String @id @default(cuid())
  login    String @unique
  password String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId String?   @unique
  sessions  Session[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([login])
  @@map(name: "users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Роли
model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map(name: "roles")
}

model Profile {
  id      String  @id @default(cuid())
  surname String?
  name    String?
  avatar  String?

  User User?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surname, name])
  @@map("profiles")
}

// -----------------------------------------------------

// Бланк ЗПП
model Blank {
  id String @id @default(cuid())

  // Название
  name                        String
  // Тип
  blankType                   BlankType?          @relation(fields: [blankTypeId], references: [id])
  blankTypeId                 String?
  // Страна
  country                     Country?            @relation(fields: [countryId], references: [id])
  countryId                   String?
  // Производитель
  manufacturer                Manufacturer?       @relation(fields: [manufacturerId], references: [id])
  manufacturerId              String?
  // Уровень защищенности
  // securityLevel               SecurityLevel?      @relation(fields: [securityLevelId], references: [id])
  securityLevelId             String?
  // Обложка
  covers                      Cover[]
  // Блок
  blocks                      Block[]
  // Скрепление
  fastenings                  Fastening[]
  // Реквизиты
  details                     Detail[]
  // Персонализация
  // Количество страниц
  pagesCount                  Int?
  // Ламинат
  laminates                   Laminate[]
  // Содержание данных персонализации
  personalizationDataContents String?
  // Способ нанесения данных
  applyingDataMethod          ApplyingDataMethod? @relation(fields: [applyingDataMethodId], references: [id])
  applyingDataMethodId        String?

  blankDocumentMatches BlankDocumentMatch[]

  notes String?

  // Список ресурсов (изображений) бланка
  imageResources ImageResource[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("blanks")
}

// Соответствие пунктам документа
enum Compliance {
  Full // Полное
  Partially // Частичное
  NotMatch // Не соответствует
}

model BlankDocumentMatch {
  id    String  @id @default(cuid())
  notes String?

  blank   Blank?  @relation(fields: [blankId], references: [id], onDelete: Cascade)
  blankId String?

  compliance Compliance?

  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?

  controlParameterValues BlankDocumentMatchOnControlParameterValues[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map(name: "blank_document_matches")
}

model BlankDocumentMatchOnControlParameterValues {
  blankDocumentMatch      BlankDocumentMatch    @relation(fields: [blankDocumentMatchId], references: [id])
  blankDocumentMatchId    String
  controlParameterValue   ControlParameterValue @relation(fields: [controlParameterValueId], references: [id])
  controlParameterValueId String

  @@id([blankDocumentMatchId, controlParameterValueId])
  @@map(name: "blank_document_match_on_control_parameter_values")
}

model BlankType {
  id String @id @default(cuid())

  // Название
  name  String  @unique
  notes String?

  blanks Blank[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map(name: "blank_types")
}

// // Уровень защищенности
// model SecurityLevel {
//   id   String @id @default(cuid())
//   name String @unique
//
//   blanks Blank[]
//
//   // Служебные поля
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   @@index([name])
//   @@map(name: "security_levels")
// }

// Страна
model Country {
  id   String @id @default(cuid())
  name String @unique

  blanks Blank[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map(name: "countries")
}

// Производитель
model Manufacturer {
  id   String @id @default(cuid())
  name String @unique

  blanks Blank[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map(name: "manufacturers")
}

// -----------------------------------------------------

// Обложка
model Cover {
  id                 String            @id @default(cuid())
  // Конструкция обложки
  coverDesign        CoverDesign?      @relation(fields: [coverDesignId], references: [id])
  coverDesignId      String?
  // Формат
  coverFormat        String?
  // Цвет покровного материала
  coverColor         CoverColor?       @relation(fields: [coverColorId], references: [id])
  coverColorId       String?
  // Фактура покровного материала
  coverTexture       CoverTexture?     @relation(fields: [coverTextureId], references: [id])
  coverTextureId     String?
  // Способ нанесения изображений
  coverImageMethod   CoverImageMethod? @relation(fields: [coverImageMethodId], references: [id])
  coverImageMethodId String?
  // Примечания
  notes              String?

  blank   Blank  @relation(fields: [blankId], references: [id], onDelete: Cascade)
  blankId String

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map("covers")
}

// Конструкция обложки
model CoverDesign {
  id    String  @id @default(cuid())
  name  String
  notes String?

  covers Cover[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("cover_designs")
}

// Цвет покровного материла
model CoverColor {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  covers Cover[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("cover_colors")
}

// Фактура покровного материала
model CoverTexture {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  covers Cover[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("cover_textures")
}

model CoverImageMethod {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  covers Cover[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("cover_image_methods")
}

// -----------------------------------------------------

// Блок
model Block {
  id String @id @default(cuid())

  // Конструкция блока
  blockDesign          BlockDesign?        @relation(fields: [blockDesignId], references: [id])
  blockDesignId        String?
  // Формат
  blockFormat          String?
  // Форма углов
  blockCornersDesign   BlockCornersDesign? @relation(fields: [blockCornersDesignId], references: [id])
  blockCornersDesignId String?
  // Материал страниц
  blockPagesMaterial   BlockPagesMaterial? @relation(fields: [blockPagesMaterialId], references: [id])
  blockPagesMaterialId String?
  // Страниц в блоке
  pagesInBlock         String?
  // Пронумерованы
  pagesNumbered        String?
  // Наличие форзацев
  hasEndPapers         Boolean?
  // Примечания
  notes                String?

  blank   Blank?  @relation(fields: [blankId], references: [id], onDelete: Cascade)
  blankId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map("blocks")
}

// Конструкция блока
model BlockDesign {
  id String @id @default(cuid())

  name  String  @unique
  // Примечания
  notes String?

  blocks Block[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("block_designs")
}

// Форма углов блока
model BlockCornersDesign {
  id    String  @id @default(cuid())
  name  String  @unique
  // Примечания
  notes String?

  blocks Block[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("block_corners_designs")
}

// Материал страниц
model BlockPagesMaterial {
  id    String  @id @default(cuid())
  name  String  @unique
  // Примечания
  notes String?

  blocks Block[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("block_pages_materials")
}

// -----------------------------------------------------

// Скрепление
model Fastening {
  id String @id @default(cuid())

  // Способ скрепления блока с обложкой
  blockAndCoverFasteningMethod   BlockAndCoverFasteningMethod? @relation(fields: [blockAndCoverFasteningMethodId], references: [id])
  blockAndCoverFasteningMethodId String?
  // Способ скрепления страниц блока
  blockPagesFasteningMethod      BlockPagesFasteningMethod?    @relation(fields: [blockPagesFasteningMethodId], references: [id])
  blockPagesFasteningMethodId    String?
  // Нити
  fasteningFibers                FasteningFiber[]
  // Скобы
  fasteningStaples               FasteningStaples[]
  // Примечания
  notes                          String?

  blank   Blank?  @relation(fields: [blankId], references: [id], onDelete: Cascade)
  blankId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map("fastenings")
}

// Способ скрепления блока с обложкой
model BlockAndCoverFasteningMethod {
  id    String  @id @default(cuid())
  name  String  @unique
  // Примечания
  notes String?

  fastenings Fastening[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("block_and_cover_fastening_methods")
}

// Способ скрепления страниц блока
model BlockPagesFasteningMethod {
  id    String  @id @default(cuid())
  name  String  @unique
  // Примечания
  notes String?

  fastenings Fastening[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("block_pages_fastening_methods")
}

// Нить
model FasteningFiber {
  id String @id @default(cuid())

  // Цвет
  fiberColor        FiberColor?      @relation(fields: [fiberColorId], references: [id])
  fiberColorId      String?
  // Морфология
  fiberMorphology   FiberMorphology? @relation(fields: [fiberMorphologyId], references: [id])
  fiberMorphologyId String?
  // Шаг стежка
  fiberStep         FiberStep?       @relation(fields: [fiberStepId], references: [id])
  fiberStepId       String?
  // Примечания
  notes             String?

  fastening   Fastening? @relation(fields: [fasteningId], references: [id], onDelete: Cascade)
  fasteningId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map("fastening_fibers")
}

// Цвет нити
model FiberColor {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  fasteningFibers FasteningFiber[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("fiber_colors")
}

// Морфология
model FiberMorphology {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  fasteningFibers FasteningFiber[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("fiber_morfologies")
}

// Шаг стежка
model FiberStep {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  fasteningFibers FasteningFiber[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("fiber_steps")
}

// Скобы
model FasteningStaples {
  id String @id @default(cuid())

  // Материал
  staplesMaterial   StaplesMaterial? @relation(fields: [staplesMaterialId], references: [id])
  staplesMaterialId String?
  // Размер спинок
  staplesBackSize   StaplesBackSize? @relation(fields: [staplesBackSizeId], references: [id])
  staplesBackSizeId String?
  // Расстояние между
  staplesDistance   StaplesDistance? @relation(fields: [staplesDistanceId], references: [id])
  staplesDistanceId String?
  // Примечания
  notes             String?

  fastening   Fastening? @relation(fields: [fasteningId], references: [id], onDelete: Cascade)
  fasteningId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map("fastening_staples")
}

// Материал скоб
model StaplesMaterial {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  fasteningStaples FasteningStaples[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("staple_materials")
}

// Размер спинок скоб
model StaplesBackSize {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  fasteningStaples FasteningStaples[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("staple_back_sizes")
}

// Расстояние между скоб
model StaplesDistance {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  fasteningStaples FasteningStaples[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("staple_distances")
}

// -----------------------------------------------------

// Изображение
// Это просто ссылка на физическое изображение
// в файловой системе
model Image {
  id              String  @id @default(cuid())
  // Имя файла
  fileName        String
  // Путь к сжатому изображению
  thumbnailPath   String?
  // Путь к оригиналу
  highQualityPath String?
  // Размер
  size            Int?
  // Тип
  type            String?
  // Примечания
  notes           String?

  // Ссылка на режим изображения (УФ, ИК и др.)
  researchMethod   ResearchMethod? @relation(fields: [researchMethodId], references: [id])
  researchMethodId String?

  // Ссылка на набор изображений
  imageSet   ImageSet? @relation(fields: [imageSetId], references: [id], onDelete: Cascade)
  imageSetId String?

  // Ссылка на устройство, с помощью которого получено изображение
  sourceDevice   SourceDevice? @relation(fields: [sourceDeviceId], references: [id])
  sourceDeviceId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fileName, notes])
  @@map("images")
}

// Метод исследования (Сканирование, Ультрафиолет, ИК образ, Просвет, Косопадающее освещение, Микроскопия)
model ResearchMethod {
  id       String  @id @default(cuid())
  name     String  @unique
  // Позиция (для сортировки)
  position Int
  notes    String?

  images Image[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("research_methods")
}

// Набор изображений одной картинки (логически) различными методами исследования
model ImageSet {
  id       String   @id @default(cuid())
  images   Image[]
  remedies Remedy[]

  imageResource   ImageResource? @relation(fields: [imageResourceId], references: [id], onDelete: Cascade)
  imageResourceId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("image_sets")
}

// Средства защиты
model Remedy {
  id String @id @default(cuid())

  remedyVariety   RemedyVariety? @relation(fields: [remedyVarietyId], references: [id])
  remedyVarietyId String?

  imageSet   ImageSet? @relation(fields: [imageSetId], references: [id], onDelete: Cascade)
  imageSetId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("remedies")
}

// Разновидность средства защиты
model RemedyVariety {
  id       String   @id @default(cuid())
  name     String
  remedies Remedy[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("remedy_varieties")
}

// Ресурс (набор изображений в различных режимах, например страница паспорта в УФ, ИК, на просвет и т.д.)
model ImageResource {
  id       String  @id @default(cuid())
  // Название (например страница №1)
  name     String
  // Позиция для сортировки
  position Int
  notes    String?

  imageSets ImageSet[]

  blank   Blank?  @relation(fields: [blankId], references: [id], onDelete: Cascade)
  blankId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("image_resources")
}

//

// Источник данных изображения
model SourceDevice {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  images Image[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("source_devices")
}

// РЕКВИЗИТЫ
// Варианты расположения
enum Location {
  TopLeft
  TopMiddle
  TopRight
  MiddleLeft
  Middle
  MiddleRight
  BottomLeft
  BottomMiddle
  BottomRight
  Custom
}

// Реквизит
model Detail {
  id       String   @id @default(cuid())
  location Location
  notes    String?

  detailType   DetailType? @relation(fields: [detailTypeId], references: [id])
  detailTypeId String?

  blank   Blank?  @relation(fields: [blankId], references: [id], onDelete: Cascade)
  blankId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map("details")
}

// Тип реквизита
model DetailType {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  details Detail[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("detail_types")
}

// Персонализация
model Laminate {
  id    String  @id @default(cuid())
  notes String?

  laminateType     LaminateType?   @relation(fields: [laminateTypeId], references: [id])
  laminateTypeId   String?
  laminateMethod   LaminateMethod? @relation(fields: [laminateMethodId], references: [id])
  laminateMethodId String?

  blank   Blank?  @relation(fields: [blankId], references: [id], onDelete: Cascade)
  blankId String?

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notes])
  @@map("laminates")
}

// Тип ламината
model LaminateType {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  laminates Laminate[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("laminate_types")
}

// Способ ламинирования
model LaminateMethod {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  laminates Laminate[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("laminate_methods")
}

// Способ нанесения данных
model ApplyingDataMethod {
  id    String  @id @default(cuid())
  name  String  @unique
  notes String?

  blanks Blank[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map("applying_data_methods")
}

// -----------------------------------------------------

// НПА с требованиями
model Document {
  id          String   @id @default(cuid())
  name        String
  number      String
  date        DateTime
  startDate   DateTime
  isNoEndDate Boolean  @default(false)
  endDate     DateTime
  notes       String?

  requirementGroups RequirementGroup[]
  controlParameters ControlParameter[]

  blankDocumentMatches BlankDocumentMatch[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, number, date, startDate, endDate, notes])
  @@map(name: "documents")
}

// Группа требований НПА
model RequirementGroup {
  id       String  @id @default(cuid())
  name     String
  position Int
  notes    String?

  requirements Requirement[]

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map(name: "requirement_groups")
}

// Конкретное требование НПА
model Requirement {
  id       String  @id @default(cuid())
  name     String
  position Int
  notes    String?

  requirementGroup   RequirementGroup @relation(fields: [requirementGroupId], references: [id], onDelete: Cascade)
  requirementGroupId String

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map(name: "requirements")
}

// Название контрольного параметра, чему должен соответствовать бланк
model ControlParameter {
  id       String  @id @default(cuid())
  name     String
  position Int
  notes    String?

  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?

  controlParameterValues ControlParameterValue[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map(name: "control_parameters")
}

// Значение контрольного параметра
model ControlParameterValue {
  id       String  @id @default(cuid())
  name     String
  position Int
  notes    String?

  controlParameter   ControlParameter? @relation(fields: [controlParameterId], references: [id])
  controlParameterId String?

  blankDocumentMatches BlankDocumentMatchOnControlParameterValues[]

  // Служебные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, notes])
  @@map(name: "control_parameter_values")
}

// -----------------------------------------------------
